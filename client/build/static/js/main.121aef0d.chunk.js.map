{"version":3,"sources":["utils.js","Components/Login.jsx","App.js","Components/Post.jsx","Components/Nav.jsx","Components/ChatWindow.jsx","Components/Home.jsx","index.js","Reducers/likeReducer.js","Reducers/isLoggedReducer.js","Reducers/userReducer.js","Reducers/allReducers.js"],"names":["loginCompleted","data","window","location","href","localStorage","token","login","GET_TOKEN","gql","GET_POSTS","ADD_COMMENT","Center","styled","div","Login","useState","username","setUsername","password","setPassword","error","setError","useLazyQuery","onCompleted","onError","getToken","loading","onChange","e","target","value","type","placeholder","onClick","variables","userName","App","MyDiv","Post","props","Comments","comments","setComments","comment","setComment","useMutation","addComment","src","photoPath","style","width","padding","user","caption","map","User","postId","id","Nav","url","socket","io","path","Position","MyBox","ChatWindow","useSelector","state","likeReducer","userReducer","message","name","setState","chat","setChat","useEffect","on","className","index","key","onTextChange","variant","label","emit","Home","useQuery","JSON","parse","post","allPosts","ele","action","isLoggedReducer","allReducers","combineReducers","store","createStore","composeWithDevTools","httpLink","createHttpLink","uri","authLink","setContext","_","headers","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"kzBAEO,IAAMA,EAAiB,SAACC,GAC7BC,OAAOC,SAASC,KAAO,6BACvBC,aAAaC,MAAQL,EAAKM,MAAMD,OAGrBE,EAAYC,cAAH,KAQTC,EAAYD,cAAH,KAOPE,EAAcF,cAAH,KAyKnB,I,yNC1LP,IAAMG,EAASC,IAAOC,IAAV,KAQG,SAASC,IAAU,IAAD,EACCC,mBAAS,MADV,mBACxBC,EADwB,KACdC,EADc,OAECF,mBAAS,MAFV,mBAExBG,EAFwB,KAEdC,EAFc,OAGLJ,mBAAS,MAHJ,mBAGxBK,EAHwB,KAGjBC,EAHiB,OAKOC,uBAAaf,EAAW,CAC5DgB,YAAaxB,EACbyB,QAAS,SAACxB,GAAD,OAAUqB,EAAS,0BAPC,mBAKxBI,EALwB,cAKZC,QALY,EAKH1B,KAK5B,OACE,kBAACW,EAAD,KACIS,EAAQ,+BAAKA,EAAL,KAAmB,KAC7B,2BAAOO,SAAU,SAAAC,GAAC,OAAEX,EAAYW,EAAEC,OAAOC,QAAQC,KAAK,OAAOC,YAAY,aACzE,2BAAOL,SAAU,SAAAC,GAAC,OAAET,EAAYS,EAAEC,OAAOC,QAAQC,KAAK,OAAOC,YAAY,aACzE,2BAAOD,KAAK,SAASD,MAAM,QAAQG,QAAU,WAAQR,EAAS,CAAES,UAAW,CAACC,SAASnB,EAAUE,SAASA,S,yHCvBjGV,cAAH,KAOK,SAAS4B,IAMtB,OACE,oCACE,kBAACtB,EAAD,O,4OCfN,IAAMuB,EAAQzB,IAAOC,IAAV,KAQI,SAASyB,EAAMC,GAAQ,IAAD,EAEHxB,mBAASwB,EAAMT,MAAMU,UAFlB,mBAE5BC,EAF4B,KAElBC,EAFkB,OAGL3B,mBAAS,MAHJ,mBAG5B4B,EAH4B,KAGnBC,EAHmB,OAIJC,sBAAYnC,GAJR,mBAI5BoC,EAJ4B,UAId9C,KAEnB,OACE,kBAACqC,EAAD,KACE,yBAAKU,IAAMR,EAAMT,MAAMkB,UAAWC,MAAO,CAACC,MAAO,QAASC,QAAQ,aAClE,yCAASZ,EAAMT,MAAMsB,KAAKjB,SAA1B,aAAuCI,EAAMT,MAAMuB,SAAnD,KACA,+BAAMZ,EAAS,GAAK,YAAY,KAAhC,KACA,+BAAMA,EAAS,GACbA,EAASa,KAAK,SAAAb,GAAQ,OAAI,yCAASA,EAASc,KAAKpB,SAAvB,YAAqCM,EAASE,SAA9C,QAC1B,KAFF,KAGA,2BAAOhB,SAAW,SAAAC,GAAC,OAAIgB,EAAYhB,EAAEC,OAAOC,QAAUC,KAAK,OAAOC,YAAY,UAAUiB,MAAO,CAACC,MAAO,WACvG,2BAAOnB,KAAK,SAASD,MAAM,UAAUG,QAAU,WAC3Ca,EAAW,CAAEZ,UAAW,CAACsB,OAAOjB,EAAMT,MAAM2B,GAAId,QAAQA,KACxDD,EAAY,GAAD,mBAAOD,GAAP,CAAiB,CAACc,KAAM,CAACpB,SAAS,UAAYQ,QAAQA,OAGnEM,MAAO,CAACC,MAAO,Y,8WC7BzB,IAAMb,EAAQzB,IAAOC,IAAV,KAaI,SAAS6C,EAAKnB,GAIzB,OACE,kBAAC,EAAD,KACA,wBAAIU,MAAO,CAAC,eAAe,UAA3B,QACA,wBAAIA,MAAO,CAAC,gBAAgB,UAA5B,U,IClBFU,E,ycACiEA,EAAI,4CAEzE,IAAMC,EAASC,IAAGF,EAAK,CAACG,KAAM,QAExBC,EAAWnD,IAAOC,IAAV,KAKRmD,EAAQpD,IAAOC,IAAV,KAYI,SAASoD,IACTC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAxC,IACMpD,EAAWkD,aAAY,SAAAC,GAAK,OAAIA,EAAME,YAAYrD,YAFrB,EAITD,mBAAS,CAAEuD,QAAS,GAAIC,KAAM,KAJrB,mBAI5BJ,EAJ4B,KAIrBK,EAJqB,OAKXzD,mBAAS,IALE,mBAK5B0D,EAL4B,KAKtBC,EALsB,KAOnCC,qBAAU,WACRf,EAAOgB,GAAG,WAAW,YAAwB,IAArBL,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,QAC5BI,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEF,OAAMD,oBAoB9B,OACE,kBAACP,EAAD,KACE,kBAACC,EAAD,CAAOa,UAAU,eATZJ,EAAKnB,KAAI,WAAoBwB,GAApB,EAAGP,KAAH,IAASD,EAAT,EAASA,QAAT,OACd,yBAAKS,IAAKD,GACR,gCAAM9D,EAAN,KAAiB,8BAAOsD,GAAxB,UAQF,2BAAOC,KAAK,UAAU5C,SAAW,SAAAC,GAAC,OAnBjB,SAAAA,GAAO4C,EAAS,2BAAKL,GAAN,kBAAcvC,EAAEC,OAAO0C,KAAO3C,EAAEC,OAAOC,SAmBjCkD,CAAapD,IAAKE,MAAOqC,EAAMG,QAASb,GAAG,4BAA4BwB,QAAQ,WAAWC,MAAM,YACtI,kBAAC,IAAD,CAAQjD,QAlBQ,SAAAL,GAAM,IAChB2C,EAAkBJ,EAAlBI,KAAMD,EAAYH,EAAZG,QACdV,EAAOuB,KAAK,UAAW,CAAEZ,OAAMD,YAC/BE,EAAS,CAAEF,QAAS,GAAIC,UAeQtB,MAAO,CAACC,MAAM,SAA5C,W,iNCrDN,IAAMvC,EAASC,IAAOC,IAAV,KAQG,SAASuE,IAAS,IAAD,EAEErE,mBAAS,MAFX,gCAKGsE,mBAAS5E,IAAlCiB,EALsB,EAKtBA,QAASN,EALa,EAKbA,MAAOpB,EALM,EAKNA,KACxB,OAAI0B,EAAgB,yCAChBN,EAAc,sCAEd,oCACA,kBAACsC,EAAD,MACA,kBAAC,EAAD,KAEI4B,KAAKC,MAAMvF,EAAKwF,KAAKC,UAClBnC,KAAI,SAAAoC,GAAG,OAAG,kBAACpD,EAAD,CAAMR,MAAO4D,QAGpC,kBAACzB,EAAD,O,IChBIN,E,QCTWS,EARK,WAAsB,IAArBD,EAAoB,uDAAd,EAAGwB,EAAW,uCACvC,OAAOA,EAAO5D,MACZ,IAAK,iBAAkB,OAAOoC,IAC9B,IAAK,iBAAkB,OAAOA,IAC9B,QAAS,OAAOA,ICGLyB,EAPS,WAA0B,IAAzBzB,EAAwB,wDAAXwB,EAAW,uCAC/C,OAAOA,EAAO5D,MACZ,IAAK,UAAW,OAAQoC,EACxB,QAAS,OAAOA,ICKLE,EARK,WAAwC,IAAvCF,EAAsC,uDAAhC,CAACnD,SAAS,UAAW2E,EAAW,uCACzD,OAAOA,EAAO5D,MACZ,IAAK,iBACL,IAAK,iBACL,QAAS,OAAOoC,ICOL0B,EANMC,0BAAgB,CACnC1B,cACAwB,kBACAvB,gB,oBJOI0B,GAAQC,sBAAYH,EAAaI,kCAG6BtC,EAAI,4CAExE,IAAMuC,GAAWC,yBAAe,CAC9BC,IAAKzC,IAID0C,GAAWC,cAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BnG,EAAQD,aAAaqG,QAAQ,SAEnC,MAAO,CACLD,QAAQ,2BACHA,GADE,IAELE,cAAerG,EAAK,iBAAaA,GAAU,SAK3CsG,GAAS,IAAIC,eAAa,CAC9BC,KAAMR,GAASS,OAAOZ,IACtBa,MAAO,IAAIC,kBAIbC,IAASC,OACP,kBAAC,IAAD,CAAUnB,MAAOA,IACf,kBAAC,iBAAD,CAAgBY,OAAQA,IACtB,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO7C,KAAK,UAAZ,IAAsB,kBAAC1B,EAAD,MAAtB,KACA,kBAAC,IAAD,CAAO0B,KAAK,SAAZ,IAAqB,kBAACsB,EAAD,MAArB,SAMN+B,SAASC,eAAe,W","file":"static/js/main.121aef0d.chunk.js","sourcesContent":["import { useLazyQuery, useQuery, gql, ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nexport const loginCompleted = (data) =>{\n  window.location.href = \"http://localhost:3000/home\"\n  localStorage.token = data.login.token\n}\n\nexport const GET_TOKEN = gql`\nquery Token($userName: String!, $password: String!){\n  login(userName: $userName, password: $password){\n    token\n    id\n  }\n}`\n\nexport const GET_POSTS = gql`\n  { post\n    {\n      allPosts\n    }\n  }`\n\n  export const ADD_COMMENT = gql`\n  mutation Comment($postId: Int!, $comment: String!){\n    addComment(postId: $postId, comment:$comment) {\n      id\n    }\n    }`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst homeurl = \"hhh\"\n\nexport const login = async (username, password, error) => {\n  const credentials = { email: username.value|| username, password: password.value || password }\n\n  let response \n  try{\n    const res = await fetch('https://cryptic-river-74579.herokuapp.com/api/users/token', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(credentials)\n    })\n\n    response = await res.json()\n    const {token, user} = response; \n    localStorage.setItem('token', token)\n    localStorage.setItem('id', user.id)\n    window.location.href = '/'\n    \n    if(response.status===401)  {error.innerHTML = \"Please Check Username and Password\"}\n  } catch(err) {window.location.href = '/error'}\n \n}\n\nexport let changeColors = (imageElement, imageLabel, className, color, text)=> {\n  imageElement.classList.add(className) \n  imageElement.addEventListener(\"mouseleave\" , ()=> {imageLabel.style.visibility=\"hidden\" })\n  imageElement.addEventListener(\"mouseenter\" , ()=> {\n    imageLabel.style.visibility=\"visible\" \n    imageLabel.style.color=color \n    imageLabel.innerHTML=text\n  })\n}\n//Will check if username or password is already in use\nexport const databaseInputFieldChecker = async (targetElement, imageElement, imageLabel, type, e)=> {\n  if (targetElement.contains(e.target)) {\n    imageElement.classList.remove(\"available\");  imageElement.classList.remove(\"inuse\");  imageElement.classList.remove(\"tooshort\")\n    imageLabel.innerHTML=\"\"\n  }\n  else {\n    const res = await fetch(`https://cryptic-river-74579.herokuapp.com/api/users/check/${type}`, {\n      method:\"POST\", \n      headers: {'Content-Type': 'application/json'},\n      body:JSON.stringify({\"value\":`${targetElement.value}`})\n    })\n    const response = await res.json()\n    //if username/email is available in db\n    if(response.message===true && targetElement.value.length>5) changeColors(imageElement, imageLabel, \"available\", \"green\", \"available\" )\n    else if (response.title===\"User found\" && targetElement.value.length>5 ) changeColors(imageElement, imageLabel, \"inuse\", \"red\", \"in use\" )\n    else if (targetElement.value.length>=1) changeColors(imageElement, imageLabel, \"tooshort\", \"grey\", \"too short\" )\n  }\n}\n\nexport const inputFieldChecker = async (targetElement, imageElement, imageLabel, e)=> {\n  if (targetElement.contains(e.target)) {\n    imageElement.classList.remove(\"available\"); imageElement.classList.remove(\"inuse\"); imageElement.classList.remove(\"tooshort\")\n  }\n  else {\n    if(targetElement.value.length>5) imageElement.classList.add(\"available\") \n    else if (targetElement.value.length<=5&&targetElement.value.length>=1) changeColors(imageElement, imageLabel, \"tooshort\", \"grey\", \"too short\" )\n  }\n}\n\nexport const placeholderMovement = (element, placeholder)=> {\n  element.addEventListener(\"keyup\", e=>{\n    if(e.target.value.length>0) {\n      placeholder.classList.add(`signupBox__placeholder--active`)\n      placeholder.classList.remove(`signupBox__placeholder--inactive`)\n    }\n    else {\n      placeholder.classList.remove(`signupBox__placeholder--active`)\n      placeholder.classList.add(`signupBox__placeholder--inactive`)\n    }\n  })\n\n  element.addEventListener(\"keydown\", e=>{\n    const key = e.key\n    if(e.target.value.length === 1) {\n      if(element.selectionStart === 0 && key === \"Delete\" || element.selectionStart === 1 && key === \"Backspace\")  \n      element.classList.remove(\"signupBox__inputText--active\")   \n    }\n    else {\n      element.classList.add(\"signupBox__inputText--active\")\n    }\n  })\n\n}\n\n\n\nexport async function postPika(apiEndPoint, payload){\n  const res = await fetch(homeurl + apiEndPoint, {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json', Authorization: `Bearer ${localStorage.token}`},\n    body: JSON.stringify(payload)\n  });\n}\nexport async function putPika(apiEndPoint, payload){\n  const res = await fetch(homeurl + apiEndPoint, {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json', Authorization: `Bearer ${localStorage.token}`},\n    body: JSON.stringify(payload)\n  });\n}\n\nexport async function deletePika(apiEndPoint){\n  const res = await fetch('https://cryptic-river-74579.herokuapp.com/api' + apiEndPoint, {\n    method: 'DELETE',\n    headers: {'Content-Type': 'application/json', Authorization: `Bearer ${localStorage.token}`},\n  });\n}\n\nexport async function get(apiEndPoint) {\n  const res = await fetch('https://cryptic-river-74579.herokuapp.com/api' + apiEndPoint, {\n    headers: { Authorization: `Bearer ${localStorage.token}` },\n  });\n  const response = await res.json();\n  return response;\n}\n\nexport const numberOfFollowers = async (id) => {\n  const user = await get(`/users/${id}/followers`);\n  const followersNum = user.user.followers.length;\n  return followersNum;\n};\n\nexport const numberOfFollowing = async (id) => {\n  const user = await get(`/users/${id}/following`);\n  const followingNum = user.user.following.length;\n  return followingNum;\n};\n\n","import React, { Component, useRef , useState} from 'react'\nimport {GET_TOKEN, loginCompleted} from \"../utils\"\nimport styled from \"styled-components\"\nimport { useLazyQuery, useQuery, gql, ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst Center = styled.div`\ndisplay: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  min-height: 100vh;`\n\nexport default function Login () {\n  const [username, setUsername] = useState(null)\n  const [password, setPassword] = useState(null)\n  const [error, setError] = useState(null)\n\n  const [getToken, { loading, data }] = useLazyQuery(GET_TOKEN, {\n    onCompleted: loginCompleted,\n    onError: (data) => setError(\"Invalid Credentials\")\n  })\n\n  return (\n    <Center>\n      { error ? <p> {error} </p> : null }\n      <input onChange={e=>setUsername(e.target.value)} type=\"text\" placeholder=\"username\" />\n      <input onChange={e=>setPassword(e.target.value)} type=\"text\" placeholder=\"password\" />\n      <input type=\"button\" value=\"Login\" onClick={ () => { getToken({ variables: {userName:username, password:password}})}}/>\n    </Center>\n  );\n}\n\n\n","import React from 'react';\nimport Login from './Components/Login'\nimport {} from \"react-router-dom\"\nimport { useQuery, gql, ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst USER = gql`\n  { user(id:1)\n    {\n      firstName\n    }\n  }`\n\nexport default function App() {\n\n  // const { loading, error, data } = useQuery(USER);\n  // if (loading) return <p>Loading...</p>;\n  // if (error) return <p>Error :</p>;\n\n  return (\n    <>\n      <Login/>\n    </>\n  );\n}\n\n","import React, { Component, useRef, useState } from 'react'\nimport { useMutation, useLazyQuery, useQuery, gql, ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport styled from 'styled-components'\nimport {GET_POSTS, ADD_COMMENT, loginCompleted} from \"../utils\"\n\nconst MyDiv = styled.div`\n  font-size: 11px;   \n  color: rgb(38,38,38);\n  width: 555px;  \n  border:solid grey 1px;  \n  background-color: rgb(243,243,243);\n  outline-width: 0;`\n\nexport default function Post (props) {\n\n  const [comments, setComments] = useState(props.value.Comments)\n  const [comment, setComment] = useState(null)\n  const [addComment, { data }] = useMutation(ADD_COMMENT)\n\n    return (  \n      <MyDiv>                                                     \n        <img src={ props.value.photoPath} style={{width: \"550px\", padding:\"1px 1px\"}} />\n        <p> { `${props.value.user.userName}: ${props.value.caption}`} </p>\n        <p> { comments[0] ? \"Comments:\":null} </p>\n        <p> { comments[0] ?\n          comments.map( comments => <p> {`${ comments.User.userName }:${ comments.comment }`} </p>)                \n        : null } </p>\n        <input onChange={ e => setComment( e.target.value ) } type=\"text\" placeholder=\"comment\" style={{width: \"400px\"}}/>\n        <input type=\"button\" value=\"Comment\" onClick={ () => {           \n            addComment({ variables: {postId:props.value.id, comment:comment}})\n            setComments( [ ...comments, {User: {userName:\"deepak\"} , comment:comment } ] )\n\n          }}         \n          style={{width: \"100px\"}} />                                                                 \n      </MyDiv>\n    )\n}","import React, { Component, useRef, useState } from 'react'\nimport { useMutation, useLazyQuery, useQuery, gql, ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport styled from 'styled-components'\n\nconst MyDiv = styled.div`\n// padding-bottom:400px;\noverflow: hidden;\nwidth:100%;\nposition: fixed;\nmargin: -9px -8px;\nwidth:100vw;\ndisplay:flex;\njustify-content: space-between;\n  font-size: 11px;   color: rgb(38,38,38);\n border:solid grey 1px;  background-color: rgb(243,243,243);\n  left:9px;   outline-width: 0;`\n\nexport default function Nav (props) {\n\n\n\n    return (  \n      <MyDiv>\n      <h1 style={{\"padding-left\":\"100px\"}}>Logo</h1> \n      <h1 style={{\"padding-right\":\"100px\"}}>Links</h1> \n      </MyDiv>\n        )\n        }                                              ","import React, { useState, useEffect } from 'react'\nimport io from 'socket.io-client'\nimport styled from 'styled-components'\nimport {Button, Input as input} from 'antd'\nimport {useSelector} from 'react-redux'\n// import TextField from '@material-ui/core/TextField'\nlet url\nprocess.env.NODE_ENV===\"development\" ? url=\"http://localhost:6777\" : url=\"https://solo-react-project.herokuapp.com/\"\n\nconst socket = io(url, {path: \"/ws\"})\n\nconst Position = styled.div`\n  position: fixed;\n  bottom: 5px;\n  right: 5px;`\n\nconst MyBox = styled.div`\n  font-size: 11px;  \n  height: 111px;  \n  color: rgb(38,38,38);\n  width: 255px;  \n  border:solid grey 1px;  \n  background-color: rgb(243,243,243);\n  left:9px;  \n  top: -8px;  \n  outline-width: 0;\n  overflow-y:auto;`\n\nexport default function ChatWindow() {\n  const like = useSelector(state => state.likeReducer)\n  const username = useSelector(state => state.userReducer.username)\n\n  const [state, setState] = useState({ message: '', name: '' })\n  const [chat, setChat] = useState([])\n\n  useEffect(() => {\n    socket.on('message', ({ name, message }) => {\n      setChat([...chat, { name, message }])\n    })\n  })\n\n  const onTextChange = e => { setState({ ...state, [e.target.name]: e.target.value }) }\n\n  const sendMessage = e => {\n    const { name, message } = state\n    socket.emit('message', { name, message })\n    setState({ message: '', name })\n  }\n\n  const renderChat = () => {\n    return chat.map(({ name, message }, index) => (\n      <div key={index} >\n        <h3> {username}: <span>{message}</span> </h3>\n      </div>\n    ))\n  }\n\n  return (\n    <Position> \n      <MyBox className=\"render-chat\">{renderChat()}</MyBox>\n      <input name=\"message\" onChange={ e => onTextChange(e) } value={state.message} id=\"outlined-multiline-static\" variant=\"outlined\" label=\"Message\" />\n      <Button onClick={sendMessage} style={{width:\"92px\"}}> Send </Button>\n    </Position>\n  )\n}\n\n\n\n\n\n","import React, { Component, useRef, useState } from 'react'\nimport { useMutation, useLazyQuery, useQuery, gql, ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport styled from 'styled-components'\nimport {GET_POSTS, ADD_COMMENT, loginCompleted, commentCompleted} from \"../utils\"\nimport Post from \"./Post\"\nimport Nav from \"./Nav\"\nimport ChatWindow from \"./ChatWindow\"\n\nconst Center = styled.div`\ndisplay: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  min-height: 100vh;`\n\nexport default function Home () {\n\n  const [username, setUsername] = useState(null)\n\n\n  const { loading, error, data } = useQuery(GET_POSTS)\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :</p>\n    return (\n      <>\n      <Nav/>\n      <Center>\n        {\n          JSON.parse(data.post.allPosts)\n            .map(ele=> <Post value={ele}/> )\n        } \n      </Center>\n<ChatWindow/>\n      </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router,  Switch,  Route,  Link} from \"react-router-dom\";\nimport App from './App';\nimport Home from './Components/Home';\nimport styled from 'styled-components'\n\n\nimport {createStore} from 'redux'\nimport allReducers from \"./Reducers/allReducers\"\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport {Provider} from \"react-redux\"\nimport { createHttpLink, useQuery, gql, ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n//GLOBAL STORE\nconst store = createStore(allReducers, composeWithDevTools())\n\nlet url\nprocess.env.NODE_ENV===\"development\"? url=\"http://localhost:6777\" : url=\"https://solo-react-project.herokuapp.com/\"\n\nconst httpLink = createHttpLink({\n  uri: url,\n});\n\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n})\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <Router>\n      <Switch>\n        <Route path=\"/login\"> <App/> </Route>\n        <Route path=\"/home\"> <Home/> </Route>\n      </Switch>\n      </Router>\n    </ApolloProvider>\n  </Provider>,\n   \n  document.getElementById('root')\n)\n","const likeReducer = (state=0, action) => {\n  switch(action.type){\n    case 'LIKE_INCREMENT': return state++\n    case 'LIKE_DECREMENT': return state--\n    default: return state\n  }\n}\n\nexport default likeReducer","const isLoggedReducer = (state=false, action) => {\n  switch(action.type){\n    case 'SIGN_IN': return !state\n    default: return state\n  }\n}\n\nexport default isLoggedReducer","const userReducer = (state={username:\"deepak\"}, action) => {\n  switch(action.type){\n    case 'LIKE_INCREMENT': return state\n    case 'LIKE_DECREMENT': return state\n    default: return state\n  }\n}\n\nexport default userReducer","import likeReducer from \"./likeReducer\"\nimport isLoggedReducer from \"./isLoggedReducer\"\nimport userReducer from \"./userReducer\"\nimport {combineReducers} from \"redux\"\n\n const allReducers = combineReducers({\n  likeReducer,\n  isLoggedReducer,\n  userReducer\n})\n\nexport default allReducers"],"sourceRoot":""}